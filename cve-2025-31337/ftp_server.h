#ifndef FTP_SERVER_H
#define FTP_SERVER_H

#include <stdint.h>
#include <sys/types.h>
#include <netinet/in.h>

// Protocol constants
#define FTP_MAGIC 0x46545021  // "FTP!"
#define MAX_PACKET_SIZE 65535
#define MAX_USERNAME_LEN 255
#define MAX_PASSWORD_LEN 255
#define MAX_FILENAME_LEN 1024
#define MAX_PATH_LEN 4096
#define BUFFER_SIZE 8192

// Command types
#define CMD_LOGIN 0x01
#define CMD_ANONYMOUS 0x02
#define CMD_REGISTER 0x03
#define CMD_GET 0x10
#define CMD_PUT 0x11
#define CMD_LIST 0x12
#define CMD_MKDIR 0x13
#define CMD_DELETE 0x14
#define CMD_RENAME 0x15
#define CMD_STAT 0x16
#define CMD_SEARCH 0x17

// Response types
#define RESP_AUTH 0x80
#define RESP_FILE_DATA 0x90
#define RESP_FILE_LIST 0x91
#define RESP_STAT_INFO 0x92
#define RESP_SEARCH_RESULTS 0x93
#define RESP_GENERIC 0x9F

// Status codes
#define STATUS_SUCCESS 0x00
#define STATUS_ERROR 0x01

// Packet header structure
typedef struct {
    uint32_t magic;
    uint8_t type;
    uint16_t length;
} __attribute__((packed)) packet_header_t;

// User structure
typedef struct {
    int id;
    char username[MAX_USERNAME_LEN + 1];
    char password_hash[65];  // SHA256 hex string
    char salt[33];           // 16 bytes hex + null
    char home_directory[MAX_PATH_LEN];
} user_t;

// Client session structure
typedef struct {
    int socket_fd;
    struct sockaddr_in client_addr;
    user_t *user;
    int authenticated;
    char current_dir[MAX_PATH_LEN];
    pid_t pid;
} client_session_t;

// File entry for directory listings
typedef struct {
    uint8_t type;  // 0 = file, 1 = directory
    char name[MAX_FILENAME_LEN];
    uint32_t size;
    uint32_t modified_time;
} file_entry_t;

// Function prototypes
int start_server(int port, const char *db_path, const char *root_dir);
int handle_client(client_session_t *session);
int authenticate_user(const char *username, const char *password, user_t *user);
int authenticate_anonymous(user_t *user);
int send_packet(int socket_fd, uint8_t type, const void *data, uint16_t length);
int recv_packet(int socket_fd, packet_header_t *header, void *buffer, size_t buffer_size);
int process_command(client_session_t *session, packet_header_t *header, void *data);

// Command handlers
int handle_get(client_session_t *session, const void *data, uint16_t length);
int handle_put(client_session_t *session, const void *data, uint16_t length);
int handle_list(client_session_t *session, const void *data, uint16_t length);
int handle_mkdir(client_session_t *session, const void *data, uint16_t length);
int handle_delete(client_session_t *session, const void *data, uint16_t length);
int handle_rename(client_session_t *session, const void *data, uint16_t length);
int handle_stat(client_session_t *session, const void *data, uint16_t length);
int handle_search(client_session_t *session, const void *data, uint16_t length);

// Database functions
int init_database(const char *db_path);
int create_user(const char *username, const char *password, const char *home_dir);
int verify_user(const char *username, const char *password, user_t *user);

// Utility functions
void generate_salt(char *salt, size_t len);
void hash_password(const char *password, const char *salt, char *hash);
int setup_chroot(const char *root_path);
void send_error_response(int socket_fd, const char *message);
void send_success_response(int socket_fd, const char *message);

#endif // FTP_SERVER_H
