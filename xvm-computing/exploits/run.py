from collections import defaultdict
import time
import subprocess
import tempfile
import hashlib
import os

mapping = defaultdict()


def exec_bin(cmd):
    os.seteuid(1000)
    os.setegid(1000)
    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            timeout=5,  # seconds
        )
        return {"ret": result.returncode, "stdout": result.stdout}
    except subprocess.TimeoutExpired:
        return {"ret": 255, "stdout": b""}


def upload():
    sz = int(input("Enter file size (max 4KB): "))
    if sz >= 4096:
        print("Err")
        exit()
    fd, path = tempfile.mkstemp(dir="./data/", suffix=".xvm")
    os.write(1, b"Feed binary: ")
    os.write(fd, os.read(0, sz))
    os.close(fd)
    hash = hashlib.sha256(path.encode()).hexdigest()
    if hash in mapping.keys():
        print("Err")
        exit()
    mapping[hash] = path.encode()
    print("Your Token:", hash)


def run():
    hash = input("Enter token: ")
    if hash not in mapping.keys():
        print("Err")
        exit()

    res = exec_bin(["./build/xvm", mapping[hash]])
    print("%d:%s" % (res["ret"], res["stdout"].split(b"\n")[0].decode()))


def info():
    hash = input("Enter token: ")
    if hash not in mapping.keys():
        print("Err")
        exit()

    res = exec_bin(["./build/xinfo", mapping[hash]])
    print(b"\n".join(res["stdout"].split(b"\n")[:13]).decode())


def menu():
    print("[1] Upload a xvm file.")
    print("[2] Run a xvm file.")
    print("[3] Info about a xvm file.")
    print("[4] Exit")
    try:
        c = int(input("> "))
    except:
        print("Err")
        exit()
    return c


def main():
    functions = [None, upload, run, info, exit]
    choice = 1
    while choice > 0 and choice < 4:
        if not os.path.exists("./data"):
            os.mkdir("./data")
        choice = menu()
        functions[choice]()


if __name__ == "__main__":
    main()
